/*
 * This file is generated by jOOQ.
 */
package de.tum.jk.orm.pojos.unischema.tables;


import de.tum.jk.orm.pojos.unischema.Indexes;
import de.tum.jk.orm.pojos.unischema.Keys;
import de.tum.jk.orm.pojos.unischema.Unischema;
import de.tum.jk.orm.pojos.unischema.tables.records.ProfessorenRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Professoren extends TableImpl<ProfessorenRecord> {

    private static final long serialVersionUID = -390439250;

    /**
     * The reference instance of <code>unischema.Professoren</code>
     */
    public static final Professoren PROFESSOREN = new Professoren();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProfessorenRecord> getRecordType() {
        return ProfessorenRecord.class;
    }

    /**
     * The column <code>unischema.Professoren.PersNr</code>.
     */
    public final TableField<ProfessorenRecord, Integer> PERSNR = createField("PersNr", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>unischema.Professoren.Name</code>.
     */
    public final TableField<ProfessorenRecord, String> NAME = createField("Name", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>unischema.Professoren.Rang</code>.
     */
    public final TableField<ProfessorenRecord, String> RANG = createField("Rang", org.jooq.impl.SQLDataType.CHAR(2), this, "");

    /**
     * The column <code>unischema.Professoren.Raum</code>.
     */
    public final TableField<ProfessorenRecord, Integer> RAUM = createField("Raum", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>unischema.Professoren</code> table reference
     */
    public Professoren() {
        this(DSL.name("Professoren"), null);
    }

    /**
     * Create an aliased <code>unischema.Professoren</code> table reference
     */
    public Professoren(String alias) {
        this(DSL.name(alias), PROFESSOREN);
    }

    /**
     * Create an aliased <code>unischema.Professoren</code> table reference
     */
    public Professoren(Name alias) {
        this(alias, PROFESSOREN);
    }

    private Professoren(Name alias, Table<ProfessorenRecord> aliased) {
        this(alias, aliased, null);
    }

    private Professoren(Name alias, Table<ProfessorenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Professoren(Table<O> child, ForeignKey<O, ProfessorenRecord> key) {
        super(child, key, PROFESSOREN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Unischema.UNISCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROFESSOREN_PRIMARY, Indexes.PROFESSOREN_RAUM);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProfessorenRecord> getPrimaryKey() {
        return Keys.KEY_PROFESSOREN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProfessorenRecord>> getKeys() {
        return Arrays.<UniqueKey<ProfessorenRecord>>asList(Keys.KEY_PROFESSOREN_PRIMARY, Keys.KEY_PROFESSOREN_RAUM);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Professoren as(String alias) {
        return new Professoren(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Professoren as(Name alias) {
        return new Professoren(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Professoren rename(String name) {
        return new Professoren(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Professoren rename(Name name) {
        return new Professoren(name, null);
    }
}
