/*
 * This file is generated by jOOQ.
 */
package de.tum.jk.orm.pojos.unischema.tables;


import de.tum.jk.orm.pojos.unischema.Indexes;
import de.tum.jk.orm.pojos.unischema.Keys;
import de.tum.jk.orm.pojos.unischema.Unischema;
import de.tum.jk.orm.pojos.unischema.tables.records.StudentenRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Studenten extends TableImpl<StudentenRecord> {

    private static final long serialVersionUID = 734330416;

    /**
     * The reference instance of <code>unischema.Studenten</code>
     */
    public static final Studenten STUDENTEN = new Studenten();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudentenRecord> getRecordType() {
        return StudentenRecord.class;
    }

    /**
     * The column <code>unischema.Studenten.MatrNr</code>.
     */
    public final TableField<StudentenRecord, Integer> MATRNR = createField("MatrNr", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>unischema.Studenten.Name</code>.
     */
    public final TableField<StudentenRecord, String> NAME = createField("Name", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>unischema.Studenten.Semester</code>.
     */
    public final TableField<StudentenRecord, Integer> SEMESTER = createField("Semester", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>unischema.Studenten</code> table reference
     */
    public Studenten() {
        this(DSL.name("Studenten"), null);
    }

    /**
     * Create an aliased <code>unischema.Studenten</code> table reference
     */
    public Studenten(String alias) {
        this(DSL.name(alias), STUDENTEN);
    }

    /**
     * Create an aliased <code>unischema.Studenten</code> table reference
     */
    public Studenten(Name alias) {
        this(alias, STUDENTEN);
    }

    private Studenten(Name alias, Table<StudentenRecord> aliased) {
        this(alias, aliased, null);
    }

    private Studenten(Name alias, Table<StudentenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Studenten(Table<O> child, ForeignKey<O, StudentenRecord> key) {
        super(child, key, STUDENTEN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Unischema.UNISCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STUDENTEN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StudentenRecord> getPrimaryKey() {
        return Keys.KEY_STUDENTEN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StudentenRecord>> getKeys() {
        return Arrays.<UniqueKey<StudentenRecord>>asList(Keys.KEY_STUDENTEN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Studenten as(String alias) {
        return new Studenten(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Studenten as(Name alias) {
        return new Studenten(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Studenten rename(String name) {
        return new Studenten(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Studenten rename(Name name) {
        return new Studenten(name, null);
    }
}
